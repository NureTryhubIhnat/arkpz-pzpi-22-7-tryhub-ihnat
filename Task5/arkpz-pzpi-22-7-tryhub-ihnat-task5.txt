Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
Звіт
З лабораторної роботи №5
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА
ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»
Виконавець:
ст. гр. ПЗПІ-22-7

Тригуб І. О.

Перевірив:
ст. викладач кафедри ПІ

Сокорчук І. П.

Харків 2024

1 Мета роботи:
Розгорнути

реалізовану

програмну

систему,

перевірити

та

налаштувати роботу розгорнутої програмної системи.
2 Хід роботи:
2.1 Опис розгорнутої програмної системи
Серверна частина:
•

Мова програмування: Серверна частина програми написана на

мові програмування JavaScript.
•

Фреймворк: Використовується Node.js разом із Express.js, що

забезпечує ефективну розробку веб-додатків і REST API.
•

База даних: MongoDB, яка використовується для зберігання

даних. Для роботи з базою даних використовується бібліотека Mongoose,
яка дозволяє легко створювати схеми та взаємодіяти з MongoDB.
•

Контролери та маршрутизація: Всі необхідні контролери

налаштовані для обробки HTTP-запитів. Реалізовані методи для роботи з
основними ресурсами системи: GET, POST, PUT, DELETE.
•

Міграції та оновлення: В структурі системи використовуються

скрипти для початкової ініціалізації бази даних та її наповнення
початковими даними.
Функціональність:
Система забезпечує збір і аналіз даних про стан здоров’я користувачів,
зокрема пульс, рівень активності, сон і стрес. Включена можливість
надсилання нагадувань про профілактичні обстеження та прийом ліків.
Інтеграція з IoT:

Система взаємодіє з IoT-пристроями через MQTT брокер, що
дозволяє автоматично отримувати дані про стан здоров’я користувача.
Використовується наступна конфігурація:
2.2 Опис розгортання
Серверна частина:
1.

Інсталяція

залежностей:

Виконано

встановлення

всіх

необхідних залежностей через npm install.
2.

Налаштування середовища: Встановлено змінні середовища

в .env файлі, зокрема підключення до бази даних MongoDB.
3.

Запуск сервера: Сервер запущено командою npm start. Для

перевірки працездатності використовувалися запити до кінцевих точок API
за допомогою Postman.
4.

Перевірка функціональності:

•

Запити до API обробляються коректно.

•

Дані успішно зберігаються в MongoDB.

•

Система генерує та надсилає нагадування користувачам.

Інтеграція IoT:
1.

Підключення ESP32 до Wi-Fi та налаштування передачі даних

на сервер.
2.

Передача зібраних даних через HTTP POST запити до API

системи.
3.

Сервер успішно обробляє отримані дані й зберігає їх у базу

даних для подальшого аналізу.
Використані інструменти та технології:
•

Node.js: Серверна частина.

•

MongoDB: Зберігання даних.

•

Postman: Тестування API.

•

MQTT: З’єднання IOT та беку

•

Visual Studio Code: Розробка та налагодження коду.

•

GitHub: Керування версіями коду.
3 Висновок:

Програмна

система

успішно

розгорнута

та

протестована

в

локальному середовищі. Всі компоненти системи працюють коректно:
•

Система обробляє дані від IoT пристроїв.

•

Нагадування генеруються та надсилаються користувачам

вчасно.
•

Дані зберігаються у базі даних MongoDB, забезпечуючи їхню

доступність для аналізу.
У подальшому можливе розгортання системи на хмарному сервері
для забезпечення масштабованості та доступності.
Посилання на відео - https://youtu.be/jh9h4VRSZP0


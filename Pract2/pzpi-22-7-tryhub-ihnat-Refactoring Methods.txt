МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»

ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»

Виконав:

Прийняв:

ст. гр. ПЗПІ-22-7

ст. викладач кафедри ПІ

Тригуб Ігнат Олексійович

Сокорчук Ігор Петрович

Харків 2024

1 МЕТА
Навчитися рефакторингу програмного коду, закріпити основні правила
оформлення коду.

2 ЗАВДАННЯ
Обрати мову програмування для прикладів коду. Створити презентацію на
тему «Правила оформлення програмного коду».

3 ХІД РОБОТИ
Було обрано мову програмування Go. У презентації (Додаток Б) наведено
основні рекомендації щодо оформлення програмного коду з описами, а також
приклад коду до і після застосування цих рекомендацій.

ВИСНОВКИ
Набуто навичок рефакторингу програмного коду, детально розглянуто
основні правила оформлення коду.
Посилання на відео-презентацію
Посилання на GitHub репозиторій с кодом

ДОДАТОК А
Презентація на тему «Правила оформлення програмного коду».

5

Основні
рекомандації
написання коду
для мови
программування
Go
Тригуб Ігнат Олексійович
Ст. гр. ПЗПІ-22-7
01.10.2024
preencoded.png

Окремі рекомандації
1

Відступи та
індентація

2 Імена зміних и
функций

Використовуйте 4 пробіли

Виберіть атмосферні та

для кожного рівня вкладки.

розрізнені імена, які додадуть
визнання цього елемента.

3 Коментарі
Надавайте чіткі та лаконічні пояснення до складних фрагментів
коду.

preencoded.png

Зміна Змінних
Іменування
Назви змінних, типів, функцій (методів) мають бути різними, але чітко та
однозначно передавати сутність даного елемента. Для змінних і класів це
мають бути іменники, а для функцій – дієслова (або словосполучення, що
відповідають їхньому значенню). Важливо, щоб звертали увагу на

зручність пошуку за назвою.

Ініціалізація
Спочатку присвойте початкове значення змінній під час оголошення. Це
знижує ризик непередбачуваних помилок і полегшує подальшу роботу з
кодом.

Зміна значення
Для зміни значення змінної використовуйте оператор присвоєння =.
Використовуйте часте перепресвоювання значень, щоб підтримувати
логіку програми на зрозумілому рівні та забезпечити правильну роботу
коду
preencoded.png

Структура кода
Пакет (Package)

Функція (Function)

Файл (File)

Основна одиниця організації коду, що

Блок коду, що виконує певну дію та

Файл, що містить код, який належить до

містить пов'язані функції, типи даних та

повертає значення або ж ні.

одного пакета.

константи.

preencoded.png

Приклади оформлення коду
Пакети і функції
Поганий код

Гарний код

Пакет util не дає чіткого розуміння, яку функціональність

Пакет mathutils чітко описує, що функція Add стосується

він надає

математичний операцій.

Назва process не дає чіткого розуміння про те, що робить
функція. Важко зрозуміти, що саме обробляє і для чого
використовується.

Назва multiplyNumbers одразу вказує, що функція множить числа.
preencoded.png

Приклади оформлення коду
Файл і іменнування змінних і функцій
Поганий код

Гарний код

Код не відображає, що в ньому міститься функція для

Код чітко описує, що в ньому міститься математичні операції.

Обчислення суми.

Імена змінних x і y, а також функції f не дають інформації
про їх призначення.

Імена змінних і функції чітко пояснюють, що вони роблять:
обчислюють площу, використовуючи довжину та ширину.
preencoded.png

Приклади оформлення коду
Ініціалізація змінних і коментарі
Поганий код

Гарний код

Змінна total не має початкового значення, що може призвести

Змінна ініціалізована значенням 0, що гарантує передбачувану

до помилок

поведінку коду.

Коментар не дає корисної інформації, що ускладнює

Коментар пояснює призначення функції, роблячи код легшим

розуміння коду.

для розуміння.

preencoded.png

Рефакторинг
1

Виявлення проблем
Визначте проблемні ділянки коду, такі як дублювання,
складність, неефективність.

2

Перетворення коду
Змініть структуру коду, не змінюючи його функціональності,
щоб підвищити читабельність та ефективність.

3

Тестування змін
Переконайтеся, що рефакторинг не вніс помилок у код,
шляхом ретельного тестування.

preencoded.png

Рефакторинг: До та Після
Поганий код

Гарний код

Проблеми:
Складна логіка у фізичному if, код якої робить важко читаним.
Функція виконання кількох дій одночасно: порівнює числа та
обчислює результати, що забезпечує принцип єдиної
відповідальності.

Код поділено на кілька функцій, кожна з яких виконує одну
конкретну дію.
Читабельність покращена за рахунок винесення логіки
перевірки та обчислень в окремі функції.
preencoded.png

Оптимизація продуктивності через
рефакторинг
Поганий код

Гарний код

Проблеми:

Пояснення:

Використання явного циклу for i := 0 робить код меншим

Використано діапазонний цикл for _, num := range numbers,
що робить код більш читабельним.
Ініціалізація max першим елементом масиву дозволяє

за Go-стилем. Ініціалізація max значенням 0 може
викликати помилку, якщо всі числа менше 0

коректно працювати із негативними числами.
preencoded.png

Видалення дубльованого коду
через рефакторинг
Поганий код

Гарний код

Проблеми:

Пояснення:

Багато дублювання: дві функції виводять одні й самі поля

Функція printPersonInfo тепер обробляє додаткові дані через
змінну кількість аргументів (additionalInfo), що усуває
дублювання.

Name і Age.

preencoded.png

Оптимізація
продуктивності
Профілювання
Використовуйте інструменти

Оптимізація
алгоритмів

профілювання для визначення

Виберіть ефективніші

"вузьких місць" в коді.

алгоритми для вирішення
певних задач.

Використання вбудованих функцій
Використовуйте оптимізовані вбудовані функції мови Go замість
самостійної реалізації.

preencoded.png

Обробка помилок
Метод

Опис

`panic`

Викликає паніку, зупиняючи
виконання програми.

`recover`

Використовується для
відновлення після паніки.

`error`

Інтерфейс, який
використовується для
представлення помилок.

preencoded.png

Приниципи SOLID
Single Responsibility
Principle

Open/Closed Principle

Кожен клас або модуль має

розширення, але закритим для

виконувати лише одну

модифікації.

Код має бути відкритим для

відповідальність.

Liskov Substitution
Principle

Interface
Segregation Principle

Підтипи повинні бути замінювані

Інтерфейси повинні бути максимально

базовими типами без порушення

специфічними та не містити

коректності.

непотрібних методів.
preencoded.png

Дотримання парадигм
програмування та
тестування
1

Тестування
Напишіть одиничні тести для
перевірки коректності коду.

2 Інтеграційне
тестування

Переконайтеся, що різні модулі
програми працюють разом.

3 Функціональне

програмування
Використовуйте функції як об'єкти
першого класу.

4 Об'єктно-

орієнтоване
програмування
Використовуйте класи, об'єкти та
методи для створення
структурованого коду.

preencoded.png

Приклади оформлення коду

Поганий код

Хороший код

Незрозумілий, складний для читання, важко модифікувати.

Легко читається, зрозумілий, простий в модифікації.

preencoded.png

Проблеми поганого та переваги хорошого
коду
Проблеми поганого коду:
1.

Іменування функцій: func1 не зрозуміло, що робить, що ускладнює читабельність і підтримку коду.

2.

Іменування змінних: Використання коротких і абстрактних змінних на кшталт a, b, c, t, x робить код складним для розуміння.

3.

Коментарі: Код не пояснюється, що робить його складним для інших розробників або навіть для автора через деякий час.

4. Виведення на екран без повернення значення: calculate виводить результат, але не повертає значення, що робить її менш універсальною.
5. Логіка: Незрозуміло, навіщо тут перевірка на a > b, чому результат множиться на 2, і як це пов'язано із задачею.
Переваги гарного коду:
1.

Чітке іменування функцій: Функція multiplyGreaterNumber дає зрозумілу назву, яка відразу вказує на те, що вона робить — множить більше
число на 2.

2.

Чітке іменування змінних: num1, num2, currentTimestamp чітко пояснюють, що саме вони представляють.

3.

Коментарі: Коментарі пояснюють функції, щоб інші розробники могли легко зрозуміти призначення коду.

4. Чітка логіка: Код легко читається і має логічну структуру, що робить його підтримку легкою.
5. Універсальність: Функція calculateAndPrint повертає результат для можливого подальшого використання або виведення на екран.
preencoded.png

Чому важливо писати код за
правилами
Продуктивність

Зрозумілість

Дотримання стандартів кодування сприяє ефективному

Чіткий, стилізований код легко читати і розуміти. Це

використанню ресурсів і підвищенню продуктивності

дозволяє легко його підтримувати і вносити зміни.

проекту.

1

2

3

Співпраця
Правила кодування допомагають забезпечити узгодженість

стилю в команді розробників, що полегшує спільну роботу.

preencoded.png

Список використанних джерел
1) Fowler, Martin. Refactoring: Improving the Design of Existing Code. Addison-Wesley Professional, 1999. – 464 p.
2) Martin, Robert C. Clean Code: A Handbook of Agile Software Craftsmanship. Prentice Hall, 2008. – 464 p.
3) McConnell, Steve. Code Complete: A Practical Handbook of Software Construction. Microsoft Press, 2004. – 960 p.
4) Sandi Metz. Practical Object-Oriented Design in Ruby: An Agile Primer. Addison-Wesley, 2013. – 320 p.

preencoded.png

Методи рефакторингу
коду програмного
забезпечення

Тригуб Ігнат Олексійович
ПЗПІ-22-7

preencoded.png

Вступ
Рефакторинг — це процес покращення внутрішньої
структури коду без зміни його зовнішньої поведінки.
Це дозволяє зробити код більш читабельним,
підтримуваним і менш схильним до помилок.
Розглянемо три методи рефакторингу:
• Extract Method (Виділення методу)
• Inline Method (Інлайновий метод)
• Replace Array with Object (Замінення масиву об’єктом)

preencoded.png

Extract Method:
Проблема: Занадто довгі методи з повторюваними блоками коду.

Вплив: Ускладнює читання та підтримку, важко повторно використовувати частини коду.
Рішення: Виділення повторюваних або логічно завершених блоків у окремі методи.

preencoded.png

Extract Method:
Переваги:
• Читабельність: Зменшено кількість дублюючого коду, код
став легше зрозуміти.
• Повторне використання: Виділені методи можна
використовувати в інших частинах програми.
• Модульність: Легше вносити зміни в окремі частини коду.

preencoded.png

Inline Method:

Проблема
• Код надмірно розділений на дрібні функції, які виконують дуже прості завдання.
• Це ускладнює розуміння загальної логіки, так як доводиться постійно стрибати між
функціями.
• В деяких випадках функції, які виконують елементарну операцію, краще вбудувати в
основний код, щоб покращити читабельність.

preencoded.png

Inline Method:
Переваги після рефакторинга
• Простота: Логіка тепер зосереджена в одній функції, немає
потреби шукати додаткові визначення.
• Читабельність: Легше зрозуміти, як знижка і податки
впливають на кінцеву ціну.
• Ефективність: Зменшено кількість викликів функцій.

preencoded.png

Replace Constructor with Factory Method:

preencoded.png

Replace Constructor with Factory Method:
Проблеми:
• Багато параметрів у конструкторі: Конструктор приймає
велику кількість параметрів (в тому числі необов'язкових).
Це робить його складним для розуміння та використання.
• Логіка в конструкторі: В конструкторі міститься не тільки
логіка ініціалізації, але й логіка обробки різних статусів
замовлення. Це порушує принцип єдиної відповідальності
(SRP).
• Дублювання коду: Логіка для обробки різних статусів
замовлення (pending, shipped, cancelled) дублюється в
кількох місцях.
• Ускладнення розширення: Якщо потрібно буде додавати
нові статуси або додаткові перевірки, код стане ще
складнішим і важчим для розуміння.

preencoded.png

Replace Constructor with Factory Method:
Переваги після рефакторингу:
• Спрощення конструктора: Тепер
конструктор приймає лише необхідні
параметри, а всю іншу логіку обробки
виконує фабричний метод.
• Чистота коду: Логіка створення замовлення
та обробки його статусів тепер розділені, що
покращує читабельність і підтримку.
• Гнучкість: Тепер ми можемо легко додавати
нові статуси або додаткові етапи в процесі
створення замовлення без змін в основному
конструкторі.

preencoded.png

Висновки:
У результаті виконаної роботи та застосування
методів рефакторингу можна зробити такі
висновки:

2. Зменшення дублювання та підвищення
1. Покращення читабельності та
підтримуваності коду: Реалізація методів Extract гнучкості: Завдяки Extract Method вдалося
зменшити дублювання коду, що полегшує
Method, Inline Method та Replace Constructor
with Factory Method дозволила значно поліпшити внесення змін і додавання нових функцій без
ризику помилок. Inline Method допомогло
структуру коду, зменшити його складність та
позбутися непотрібних методів, спрощуючи код
зробити його легшим для розуміння. Кожен з
Replace Constructor with Factory Method
методів рефакторингу усуває специфічні
проблеми, такі як довгі методи, дублювання коду забезпечує більшу гнучкість при створенні
об'єктів, а також робить процес створення більш
та складність конструкторів.
зрозумілим і контрольованим.

preencoded.png

Висновки:
4. Загальне покращення якості коду:
3. Забезпечення принципу єдиної
Рефакторинг допоміг покращити якість коду,
відповідальності: За допомогою цих методів
зробивши його легшим для підтримки,
кожен елемент коду виконує чітко визначену
тестування та розширення. Ці методи є
функцію, що відповідає принципу єдиної
відповідальності (SRP). Це дозволяє коду бути не важливими інструментами для розробника, який
прагне створювати чистий і ефективний код.
лише більш читабельним, але й тестованим та
масштабованим.

Отже, застосування методів рефакторингу є
важливим етапом у розробці програмного
забезпечення, який сприяє покращенню якості
коду та його подальшій підтримці.
preencoded.png

Список використанних джерел
1) Fowler, Martin. Refactoring: Improving the Design of Existing Code. Addison-Wesley Professional, 1999. – 464 p.
2) Martin, Robert C. Clean Code: A Handbook of Agile Software Craftsmanship. Prentice Hall, 2008. – 464 p.
3) McConnell, Steve. Code Complete: A Practical Handbook of Software Construction. Microsoft Press, 2004. – 960 p.
4) Sandi Metz. Practical Object-Oriented Design in Ruby: An Agile Primer. Addison-Wesley, 2013. – 320 p.

preencoded.png


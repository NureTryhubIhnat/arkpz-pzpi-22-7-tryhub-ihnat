МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»

ЗВІТ
до практичного заняття №2 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Методи рефакторингу коду программного забезпечення»

Виконав:

Прийняв:

ст. гр. ПЗПІ-22-7

ст. викладач кафедри ПІ

Тригуб Ігнат Олексійович

Сокорчук Ігор Петрович

Харків 2024

1 МЕТА
Навчитися ідентифікувати проблеми в коді та використовувати відповідні
методи рефакторингу для покращення його якості.
2 ЗАВДАННЯ
Cтудент повинен обрати три методи рефакторингу коду із книги Мартіна
Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади
свого особистого коду (з курсових, лабораторних або інших проєктів), який
потребує покращення, та продемонструвати застосування обраних методів.

3 ХІД РОБОТИ
Вся робота була виконана та показана на слайдах презентації. Вона містить
всі обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку
А.

ВИСНОВКИ
Ми вивчили основи рефакторингу коду та його значення для покращення
якості програмного забезпечення. Після застосування кожного методу ми побачили
значне покращення структури та читабельності коду. Ці зміни також зробили код
легшим для підтримки та розширення.

Посилання на відео презентацію - https://youtu.be/IhqEIo6RoSU
Посилання на GitHub репозиторій с кодом https://github.com/NureTryhubIhnat/arkpz-pzpi-22-7-tryhub-ihnat/tree/main/Pract2/arkpz-pzpi-22-7-tryhub-ihnat-pract2

ДОДАТОК А
Презентація на тему «Правила оформлення програмного коду».

Методи
рефакторингу
коду
програмного
забезпечення
Тригуб Ігнат Олексійович
ПЗПІ-22-7



Вступ
Рефакторинг — це процес покращення внутрішньої
структури коду без зміни його зовнішньої поведінки.
Це дозволяє зробити код більш читабельним,
підтримуваним і менш схильним до помилок.
Розглянемо три методи рефакторингу:
• Extract Method (Виділення методу)
• Inline Method (Інлайновий метод)
• Replace Array with Object (Замінення масиву об’єктом)



Extract Method:
Проблема: Занадто довгі методи з повторюваними блоками коду.

Вплив: Ускладнює читання та підтримку, важко повторно використовувати частини коду.
Рішення: Виділення повторюваних або логічно завершених блоків у окремі методи.



Extract Method:
Переваги:
• Читабельність: Зменшено кількість дублюючого коду, код
став легше зрозуміти.
• Повторне використання: Виділені методи можна
використовувати в інших частинах програми.
• Модульність: Легше вносити зміни в окремі частини коду.



Inline Method:
Проблема
• Код надмірно розділений на дрібні функції, які виконують дуже прості завдання.
• Це ускладнює розуміння загальної логіки, так як доводиться постійно стрибати між
функціями.
• В деяких випадках функції, які виконують елементарну операцію, краще вбудувати в
основний код, щоб покращити читабельність.



Inline Method:
Переваги після рефакторинга
• Простота: Логіка тепер зосереджена в одній функції, немає
потреби шукати додаткові визначення.
• Читабельність: Легше зрозуміти, як знижка і податки
впливають на кінцеву ціну.
• Ефективність: Зменшено кількість викликів функцій.



Replace Constructor with Facto



Replace Constructor with Facto
Проблеми:
• Багато параметрів у конструкторі: Конструктор приймає
велику кількість параметрів (в тому числі необов'язкових).
Це робить його складним для розуміння та використання.
• Логіка в конструкторі: В конструкторі міститься не тільки
логіка ініціалізації, але й логіка обробки різних статусів
замовлення. Це порушує принцип єдиної відповідальності
(SRP).
• Дублювання коду: Логіка для обробки різних статусів
замовлення (pending, shipped, cancelled) дублюється в
кількох місцях.
• Ускладнення розширення: Якщо потрібно буде додавати
нові статуси або додаткові перевірки, код стане ще
складнішим і важчим для розуміння.



Replace Constructor with Facto
Переваги після рефакторингу:
• Спрощення конструктора: Тепер
конструктор приймає лише необхідні
параметри, а всю іншу логіку обробки
виконує фабричний метод.
• Чистота коду: Логіка створення замовлення
та обробки його статусів тепер розділені, що
покращує читабельність і підтримку.
• Гнучкість: Тепер ми можемо легко додавати
нові статуси або додаткові етапи в процесі
створення замовлення без змін в основному
конструкторі.



Висновки:
У результаті виконаної роботи та застосування
методів рефакторингу можна зробити такі
висновки:

2. Зменшення дублювання та підвищення
1. Покращення читабельності та
підтримуваності коду: Реалізація методів Extract гнучкості: Завдяки Extract Method вдалося
зменшити дублювання коду, що полегшує
Method, Inline Method та Replace Constructor
with Factory Method дозволила значно поліпшити внесення змін і додавання нових функцій без
ризику помилок. Inline Method допомогло
структуру коду, зменшити його складність та
позбутися непотрібних методів, спрощуючи код
зробити його легшим для розуміння. Кожен з
Replace Constructor with Factory Method
методів рефакторингу усуває специфічні
проблеми, такі як довгі методи, дублювання коду забезпечує більшу гнучкість при створенні
об'єктів, а також робить процес створення більш
та складність конструкторів.
зрозумілим і контрольованим.



Висновки:
4. Загальне покращення якості коду:
3. Забезпечення принципу єдиної
Рефакторинг допоміг покращити якість коду,
відповідальності: За допомогою цих методів
зробивши його легшим для підтримки,
кожен елемент коду виконує чітко визначену
тестування та розширення. Ці методи є
функцію, що відповідає принципу єдиної
відповідальності (SRP). Це дозволяє коду бути не важливими інструментами для розробника, який
прагне створювати чистий і ефективний код.
лише більш читабельним, але й тестованим та
масштабованим.

Отже, застосування методів рефакторингу є
важливим етапом у розробці програмного
забезпечення, який сприяє покращенню якості
коду та його подальшій підтримці.


Список використанних джерел
1) Fowler, Martin. Refactoring: Improving the Design of Existing Code. Addison-Wesley Professional, 1999. – 464 p.
2) Martin, Robert C. Clean Code: A Handbook of Agile Software Craftsmanship. Prentice Hall, 2008. – 464 p.
3) McConnell, Steve. Code Complete: A Practical Handbook of Software Construction. Microsoft Press, 2004. – 960 p.
4) Sandi Metz. Practical Object-Oriented Design in Ruby: An Agile Primer. Addison-Wesley, 2013. – 320 p.




